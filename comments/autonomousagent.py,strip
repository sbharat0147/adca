from datetime import datetime
import re
import os
import json
import typer
from autonomous_data_collection_agent import config, APP_NOT_FOUND, ENDPOINT_NOT_FOUND, DUPLICATE_RECORD
from autonomous_data_collection_agent.database import DatabaseHandler, get_database_path
import logging 


logging.basicConfig(filename=config.getLogFilePath(), filemode='a', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', datefmt="%d-%b-%y %H:%M:%S", level=logging.DEBUG)

class CurrentEndpoint:
    endpoint: dict
    error: int
    def __init__(self, endpoint, error):
        self.endpoint = endpoint
        self.error = error

class CurrentApplication:
    application: dict
    error: int
    def __init__(self, application, error):
        self.application = application
        self.error = error
    
class Endpoints:
    def __init__(self, db_path: str) -> None:
        #--
        self._db_handler = DatabaseHandler(db_path)
    
    def validate_endpoint_data(self, data: dict):
        #--

        if data["name"] is not None:
            if not isinstance(data["name"], str):
                typer.secho(
                    "Endpoint name must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["app_id"] is not None:
            if not isinstance(data["app_id"], str):
                typer.secho(
                    "Endpoint app id must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["url_endpoint"] is not None:
            if not isinstance(data["url_endpoint"], str):
                typer.secho(
                    "Endpoint url must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)

        if data["method"] is not None:
            if not isinstance(data["method"], str):
                typer.secho(
                    "Endpoint method must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["payload"] is not None:
            if not (isinstance(data["payload"], str) or isinstance(data["payload"], dict)):
                typer.secho(
                    "Endpoint payload must be of type string or dict", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
            try:
                if isinstance(data["payload"], str): 
                    payload: dict = json.loads(data["payload"])
                    if not isinstance(payload, dict):
                        typer.secho(
                            "Endpoint payload must be valid JSON string of single object", fg=typer.colors.RED
                        )
                        raise typer.Exit(1)
            except json.decoder.JSONDecodeError:
                typer.secho(
                    "Endpoint payload must be valid JSON string", fg=typer.colors.RED
                )
                raise typer.Exit(1)

        if data["filters"] is not None:
            if not (isinstance(data["filters"], str) or isinstance(data["filters"], list)):
                typer.secho(
                    "Endpoint filters must be of type string or list", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
            try:
                if isinstance(data["filters"], str): 
                    filters: list[dict] = json.loads(data["filters"])
                    if not isinstance(filters, list):
                        typer.secho(
                            "Endpoint filters must be valid JSON string of list of objects", fg=typer.colors.RED
                        )
                        raise typer.Exit(1)
            except json.decoder.JSONDecodeError:
                typer.secho(
                    "Endpoint filters must be valid JSON string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["last_sync"] is not None:
            if not (isinstance(data["last_sync"], str) or isinstance(data["last_sync"], datetime)):
                typer.secho(
                    "Endpoint last sync must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["page_size"] is not None:
            if not isinstance(data["page_size"], int):
                typer.secho(
                    "Endpoint page_size must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1)    
        
        if data["process_status"] is not None:
            if not isinstance(data["process_status"], int):
                typer.secho(
                    "Endpoint process_status must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1) 
        
        if data["status"] is not None:
            if not isinstance(data["status"], int):
                typer.secho(
                    "Endpoint status must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        return True
    
    def add(self, name: str, app_short_name: str, url_endpoint: str, method: str, payload: dict, filters: list[dict], page_size: int, last_sync: datetime, process_status: int, status: int) -> CurrentEndpoint:
        #--

        if type(filters) is str:
            filters = json.loads(filters)

        if type(payload) is str:
            payload = json.loads(payload)
        
        assert method in ["GET", "POST"], "Invalid method. Only 'GET' and 'POST' are allowed."
        assert process_status in [0, 1, 2], "Invalid process status. Only 0, 1 and 2 are allowed."
        for filter in filters:
            assert filter['column_name'] in ["CREATED_AT", "UPDATED_AT", "DELETED_AT"], "Invalid column name. Only 'CREATED_AT', 'UPDATED_AT' and 'DELETED_AT' are allowed."
            assert filter['operator'] in [">", "<", "=", ">=", "<=", "!=", "<>"], "Invalid operator. Only '>', '<', '=', '>=', '<=', '!=', '<>' are allowed."
            datetime.strptime(filter['column_value'], '%d-%m-%Y %H:%M:%S')  ##


        app_handler = DatabaseHandler(get_database_path(config.CONFIG_FILE_PATH, 'app'))
        try:
            app_id = str(next(iter(app_handler.get_by_column('short_name', app_short_name).item_list)))
        except IndexError:
            return CurrentEndpoint({}, APP_NOT_FOUND)
        
        if not app_id:
            return CurrentEndpoint({}, APP_NOT_FOUND)
    
        endpoint = {
            "app_id": app_id,
            "name": name,
            "url_endpoint": url_endpoint,
            "method": method,
            "payload": payload,
            "filters": filters,
            "page_size": page_size,
            "last_sync": last_sync,
            "process_status": process_status,
            "failed_count": 0,
            "failed_time": "",
            "status": status
        }

        self.validate_endpoint_data(endpoint)

        duplicate_endpoint_name_obj = self.get_app_endpoint_by_name(app_id, name) 

        if duplicate_endpoint_name_obj.endpoint :
            return CurrentEndpoint({}, DUPLICATE_RECORD)
        
        read = self._db_handler.add_item(endpoint)
        return CurrentEndpoint(endpoint, read.error)
            

    def get_endpoint_list(self) -> list[dict]:
        #--
        read = self._db_handler.read_items()
        return read.item_list
    
    def get_endpoint_by_id(self, ENDPOINT_ID: str) -> CurrentEndpoint:
        #--

        read = self._db_handler.get_by_id(int(ENDPOINT_ID))
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            return CurrentEndpoint( read.item_list[0], read.error)
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
        
    def get_endpoint_by_name(self, name: str) -> CurrentEndpoint:
        #--

        read = self._db_handler.get_by_column('name', name)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            return CurrentEndpoint( read.item_list, read.error)
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
    
    def get_app_endpoint_by_name(self, app_id: str, name: str) -> CurrentEndpoint:
        #--

        read = self._db_handler.get_by_query(lambda x: x['app_id'] == app_id and x['name'] == name)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            return CurrentEndpoint( read.item_list, read.error)
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
    
    def get_endpoint_by_url(self, url_endpoint: str) -> CurrentEndpoint:
        #--
        read = self._db_handler.get_by_column('url_endpoint', url_endpoint)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            return CurrentEndpoint( read.item_list, read.error)
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
    
    def get_endpoints_by_query(self, query: str) -> list[dict]:
        #--
        read = self._db_handler.get_by_query(query_str=query)
        return read.item_list
    
    def get_app_endpoints(self, app_short_name: str):
        #--
        app_handler = DatabaseHandler(get_database_path(config.CONFIG_FILE_PATH, 'app'))
        try:
            app_id = str(next(iter(app_handler.get_by_column('short_name', app_short_name).item_list)))
        except IndexError:
            return CurrentEndpoint({}, APP_NOT_FOUND)
        
        if app_id:
            read = self._db_handler.get_by_column('app_id', app_id)
            return read.item_list
        return CurrentEndpoint({}, APP_NOT_FOUND)
    
    def get_app_endpoints_by_process_status(self, app_short_name: str, process_status: int):
        #--
        
        app_handler = DatabaseHandler(get_database_path(config.CONFIG_FILE_PATH, 'app'))
        all_apps = app_handler.get_by_column('short_name', app_short_name).item_list
        try:
            if all_apps:
                app_id = str(next(iter(app_handler.get_by_column('short_name', app_short_name).item_list)))
        except IndexError:
            return CurrentEndpoint({}, APP_NOT_FOUND)
        
        if app_id:
            read = self._db_handler.get_by_query(lambda x: x['app_id'] == app_id and x['process_status'] == process_status)
            return read.item_list
        return CurrentEndpoint({}, APP_NOT_FOUND)
    
    def get_app_endpoints_by_status(self, app_short_name: str, status: int):
        #--
        
        app_handler = DatabaseHandler(get_database_path(config.CONFIG_FILE_PATH, 'app'))
        try:
            app_id = next(iter(app_handler.get_by_column('short_name', app_short_name).item_list))
        except IndexError:
            return CurrentEndpoint({}, APP_NOT_FOUND)
        
        if app_id:
            read = self._db_handler.get_by_query(lambda x: x['app_id'] == app_id and x['status'] == status)
            return read.item_list
        return CurrentEndpoint({}, APP_NOT_FOUND)
    
    def update_endpoint(self, ENDPOINT_ID: int, data: dict) -> CurrentEndpoint:
        #--

        read = self._db_handler.get_by_id(ENDPOINT_ID)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            endpoint = read.item_list[0]
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
        
        endpoint.update(data)
        
        self.validate_endpoint_data(endpoint)

        duplicate_endpoint_obj = self.get_app_endpoint_by_name(endpoint["app_id"], endpoint["name"]) 

        if duplicate_endpoint_obj.endpoint and next(iter(duplicate_endpoint_obj.endpoint)) != ENDPOINT_ID:
            return CurrentEndpoint({}, DUPLICATE_RECORD)

        if type(endpoint["last_sync"]) is datetime:
           endpoint["last_sync"] = str(endpoint["last_sync"])

        write = self._db_handler.update_by_id(ENDPOINT_ID, data=endpoint)
        return CurrentEndpoint(endpoint, write.error)
    
    def update_endpoint_status(self, ENDPOINT_ID: int, status: int) -> CurrentEndpoint:
        #--
       
        read = self._db_handler.get_by_id(ENDPOINT_ID)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            endpoint = read.item_list[0]
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
        endpoint.update({'status': status})
        write = self._db_handler.update_by_id(ENDPOINT_ID, data={'status': status})
        return CurrentEndpoint(endpoint, write.error)
    
    def update_endpoint_process_status(self, ENDPOINT_ID: int, process_status: int) -> CurrentEndpoint:
        #--

        read = self._db_handler.get_by_id(ENDPOINT_ID)
        if read.error:
            return CurrentEndpoint({}, read.error)
        try:
            endpoint = read.item_list[0]
        except IndexError:
            return CurrentEndpoint({}, ENDPOINT_NOT_FOUND)
        endpoint.update({'process_status': process_status})
        write = self._db_handler.update_by_id(ENDPOINT_ID, data={'process_status': process_status})
        return CurrentEndpoint(endpoint, write.error)
    
    def update_endpoints_by_query(self, query_str: str, data: dict):
        #--

        ##

        write = self._db_handler.update_by_query(query_str=query_str, data=data)
        if write.error:
            return CurrentEndpoint({}, write.error)
    
        return write.item_list

    def remove(self, ENDPOINT_ID: int) -> CurrentEndpoint:
        #--
        write = self._db_handler.delete_by_id(ENDPOINT_ID)
        if write.error:
            return CurrentEndpoint({}, write.error)
        
        return CurrentEndpoint(ENDPOINT_ID, write.error)

    def remove_all(self) -> CurrentEndpoint:
        #--
        
        write = self._db_handler.purge()
        return CurrentEndpoint({}, write.error)
    
    def remove_all_by_app(self, app_short_name: str):
        #--

        app_handler = DatabaseHandler(get_database_path(config.CONFIG_FILE_PATH, 'app'))
        try:
            app_id = next(iter(app_handler.get_by_column('short_name', app_short_name).item_list))
        except IndexError:
            return CurrentEndpoint({}, APP_NOT_FOUND)
        write = self._db_handler.delete_by_query(lambda x: x['app_id'] == app_id)

        if write.error:
            return CurrentEndpoint({}, write.error)
        else:
            return CurrentEndpoint(write.item_list, write.error)

##

##

class Applications:
    def __init__(self, db_path: str) -> None:
        #--
        self._db_handler = DatabaseHandler(db_path)
    
    def is_valid_cronjob(self, sync_frequency):
        #--
        ##

        ##


        cron_regex = r'^\S+\s+\S+\s+\S+\s+\S+\s+\S+$'

        if sync_frequency is None:
            return None
        elif re.match(cron_regex, sync_frequency):
            return sync_frequency
        else:
            return False
        
    def check_and_create_directory(self, path):
        #--
        try:
            if path is None:
                return None
            ##

            elif not os.path.exists(path):
                ##

                os.makedirs(path)
                return path  ##

            else:
                return path  ##

        except OSError as e:
            return f"Error creating directory: {str(e)}"
        
    def validate_app_data(self, data: dict):
        #--

        if data["name"] is not None:
            if not isinstance(data["name"], str):
                typer.secho(
                    "App name must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["short_name"] is not None:
            if not isinstance(data["short_name"], str):
                typer.secho(
                    "App short name must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["host"] is not None:
            if not isinstance(data["host"], str):
                typer.secho(
                    "App host must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)

        if data["url_scheme"] is not None:
            if not isinstance(data["url_scheme"], str):
                typer.secho(
                    "App URL Scheme must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["auth_type"] is not None:
            if not isinstance(data["auth_type"], str):
                typer.secho(
                    "App Auth Type must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["auth_data"] is not None:
            if not (isinstance(data["auth_data"], str) or isinstance(data["auth_data"], dict)):
                typer.secho(
                    "App Auth Data must be of type string or dict", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
            try:
                if isinstance(data["auth_data"], str): 
                    auth_data: dict = json.loads(data["auth_data"])
                    if not isinstance(auth_data, dict):
                        typer.secho(
                            "App Auth Data must be valid JSON string of single object", fg=typer.colors.RED
                        )
                        raise typer.Exit(1)
            except json.decoder.JSONDecodeError:
                typer.secho(
                    "App Auth Data must be valid JSON string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        if data["dump_path"] is not None:
            if not isinstance(data["dump_path"], str):
                typer.secho(
                    "App dump path must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["sync_frequency"] is not None:
            if not isinstance(data["sync_frequency"], str):
                typer.secho(
                    "App sync frequency must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["last_sync"] is not None:
            print(type(data["last_sync"]), data["last_sync"])
            if not (isinstance(data["last_sync"], str) or isinstance(data["last_sync"], datetime)):
                typer.secho(
                    "App last sync must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
        
        if data["next_sync"] is not None:
            if not (isinstance(data["next_sync"], str) or isinstance(data["next_sync"], datetime)):
                typer.secho(
                    "App next sync must be of type string", fg=typer.colors.RED
                )
                raise typer.Exit(1)

        if data["default_payload"] is not None:
            if not (isinstance(data["default_payload"], str) or isinstance(data["default_payload"], dict)):
                typer.secho(
                    "App default_payload must be of type string or dict", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
            try:
                if isinstance(data["default_payload"], str): 
                    default_payload: dict = json.loads(data["default_payload"])
                    if not isinstance(default_payload, dict):
                        typer.secho(
                            "App default_payload must be valid JSON string of single object", fg=typer.colors.RED
                        )
                        raise typer.Exit(1)
            except json.decoder.JSONDecodeError:
                typer.secho(
                    "App default_payload must be valid JSON string", fg=typer.colors.RED
                )
                raise typer.Exit(1)

        if data["default_filters"] is not None:
            if not (isinstance(data["default_filters"], str) or isinstance(data["default_filters"], list)):
                typer.secho(
                    "App default_filters must be of type string or list", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
            try:
                if isinstance(data["default_filters"], str): 
                    default_filters: list[dict] = json.loads(data["default_filters"])
                    if not isinstance(default_filters, list):
                        typer.secho(
                            "App default_filters must be valid JSON string of list of objects", fg=typer.colors.RED
                        )
                        raise typer.Exit(1)
            except json.decoder.JSONDecodeError:
                typer.secho(
                    "App default_filters must be valid JSON string", fg=typer.colors.RED
                )
                raise typer.Exit(1)
                            
        if data["default_page_size"] is not None:
            if not isinstance(data["default_page_size"], int):
                typer.secho(
                    "App default_page_size must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1)    
        
        if data["process_status"] is not None:
            if not isinstance(data["process_status"], int):
                typer.secho(
                    "App process_status must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1) 
        
        if data["status"] is not None:
            if not isinstance(data["status"], int):
                typer.secho(
                    "App status must be of type integer", fg=typer.colors.RED
                )
                raise typer.Exit(1)
            
        return True


    def add(self, name: str, short_name: str, host: str, url_scheme: str, auth_type: str, auth_data: dict, dump_path: str, sync_frequency: str, last_sync: datetime, next_sync: datetime, default_payload: dict, default_filters: list[dict], default_page_size: int, process_status: int, status: int ) -> CurrentApplication:
        #--

        if type(default_payload) is str:
            default_payload = json.loads(default_payload)
        if type(default_filters) is str:
           default_filters = json.loads(default_filters)
        
        if type(auth_data) is str:
           auth_data = json.loads(auth_data)

        assert url_scheme in ["http", "https"], "Invalid URL scheme. Only 'http' and 'https' are allowed."

        assert auth_type in [None, "NONE", "KEYCLOAK", "BASIC"], "Invalid authentication type. Only None, 'KEYCLOAK' and 'BASIC' are allowed."
        for filter in default_filters:
            assert filter['column_name'] in ["CREATED_AT", "UPDATED_AT", "DELETED_AT"], "Invalid column name. Only 'CREATED_AT', 'UPDATED_AT' and 'DELETED_AT' are allowed."
            assert filter['operator'] in [">", "<", "=", ">=", "<=", "!=", "<>"], "Invalid operator. Only '>', '<', '=', '>=', '<=', '!=', '<>' are allowed."
            datetime.strptime(filter['column_value'], '%d-%m-%Y %H:%M:%S')  ##


        assert process_status in [0, 1, 2], "Invalid process status. Only 0, 1 and 2 are allowed."

        if not self.is_valid_cronjob(sync_frequency):
            print(f"'{sync_frequency}' is not a valid cron job frequency.")
        
        if not self.check_and_create_directory(dump_path):
            print(f"'{dump_path}' is not a valid direcotry or couldn't be created.")

        application = {
            "name": name,
            "short_name": short_name,
            "host": host,
            "url_scheme": url_scheme,
            "auth_type": auth_type,
            "auth_data": auth_data,
            "dump_path": dump_path,
            "sync_frequency": sync_frequency,
            "last_sync": last_sync,
            "next_sync": next_sync,
            "default_payload": default_payload,
            "default_filters": default_filters,
            "default_page_size": default_page_size,
            "process_status": process_status,
            "status": status
        }

        self.validate_app_data(application)
        duplicate_app_name_object = self.get_app_by_name(name) 
        duplicate_app_short_name_object = self.get_app_by_short_name(short_name)

        if duplicate_app_name_object.application or duplicate_app_short_name_object.application:
            return CurrentApplication({}, DUPLICATE_RECORD)
        app_result = self._db_handler.add_item(application)
        application = app_result.item_list
        error = app_result.error
        return CurrentApplication(application, error)


    def get_applications(self) -> list[dict]:
        #--
        read = self._db_handler.read_items()
        return read.item_list

    def get_app_by_id(self, APP_ID: str) -> CurrentApplication:
        #--
        read = self._db_handler.get_by_id(int(APP_ID))
        if read.error:
            return CurrentApplication({}, read.error)
        try:
            return CurrentApplication( read.item_list[0], read.error)
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
        
    def get_app_by_name(self, name: str) -> CurrentApplication:
        #--

        read = self._db_handler.get_by_column('name', name)
        if read.error:
            return CurrentApplication({}, read.error)
        
        try:
            return CurrentApplication( read.item_list, read.error)
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
    
    def get_app_by_short_name(self, short_name: str) -> CurrentApplication:
        #--
        read = self._db_handler.get_by_column('short_name', short_name)
        if read.error:
            return CurrentApplication({}, read.error)
        try:
            return CurrentApplication( read.item_list, read.error)
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
    
    def get_app_by_status(self, status: int) -> list[dict]:
        #--
        read = self._db_handler.get_by_query(lambda x: x['status'] == status)
        return read.item_list
    
    def get_app_by_query(self, query: str) -> list[dict]:
        #--
        ##

        
        read = self._db_handler.get_by_query(query_str=query)
        return read.item_list

    def get_app_by_process_status(self, process_status: int) -> list[dict]:
        #--
    
        read = self._db_handler.get_by_query(lambda x: x['process_status'] == process_status and x['status']==1)
        return read.item_list
    
    def update_app(self, APP_ID: int, data: dict) -> CurrentApplication:
        #--
        read = self._db_handler.get_by_id(APP_ID)
        if read.error:
            return CurrentApplication({}, read.error)
        try:
            application = read.item_list[0]
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
        
        application.update(data)

        self.validate_app_data(application)

        duplicate_app_name_object = self.get_app_by_name(application["name"]) 
        duplicate_app_short_name_object = self.get_app_by_short_name(application["short_name"])

        if (duplicate_app_name_object.application and next(iter(duplicate_app_name_object.application)) != APP_ID)  or (duplicate_app_short_name_object.application and next(iter(duplicate_app_short_name_object.application)) != APP_ID):
            return CurrentApplication({}, DUPLICATE_RECORD)
        
        if type(application["default_payload"]) is str:
            application["default_payload"] = json.loads(application["default_payload"])
        if type(application["default_filters"]) is str:
           application["default_filters"] = json.loads(application["default_filters"])
        
        if type(application["auth_data"]) is str:
           application["auth_data"] = json.loads(application["auth_data"])

        if type(application["last_sync"]) is datetime:
           application["last_sync"] = str(application["last_sync"])
        
        if type(application["next_sync"]) is datetime:
           application["next_sync"] = str(application["next_sync"])

        write = self._db_handler.update_by_id(APP_ID, data=application)
        return CurrentApplication(application, write.error)
    
    def update_app_status(self, APP_ID: int, status: int) -> CurrentApplication:
        #--
        read = self._db_handler.get_by_id(APP_ID)
        if read.error:
            return CurrentApplication({}, read.error)
        try:
            application = read.item_list[0]
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
        application.update({'status': status})
        write = self._db_handler.update_by_id(APP_ID, data={'status': status})
        return CurrentApplication(application, write.error)
    
    def update_app_process_status(self, APP_ID: int, process_status: int) -> CurrentApplication:
        #--
        read = self._db_handler.get_by_id(APP_ID)
        if read.error:
            return CurrentApplication({}, read.error)
        try:
            application = read.item_list[0]
        except IndexError:
            return CurrentApplication({}, APP_NOT_FOUND)
        application.update({'process_status': process_status})
        write = self._db_handler.update_by_id(APP_ID, data={'process_status': process_status})
        return CurrentApplication(application, write.error)
    
    def update_app_by_query(self, query_str: str, data: dict) -> list:
        #--
        ##

        write = self._db_handler.update_by_query(query_str=query_str, data=data)    
        return write.item_list
    
    def delete_app_by_query(self, query_str: str) -> list:
        #--
        ##

        write = self._db_handler.delete_by_query(query_str=query_str)    
        return write.item_list

    def remove(self, APP_ID: int) -> CurrentApplication:
        #--
        write = self._db_handler.delete_by_id(APP_ID)
        
        return CurrentApplication({}, write.error)

    def remove_all(self) -> CurrentApplication:
        #--
        write = self._db_handler.purge()
        return CurrentApplication({}, write.error)

def get_application_id_by_short_name(app_short_name):
    #--
    applications = Applications(get_database_path(config.CONFIG_FILE_PATH, 'app'))
    app_response = applications.get_app_by_short_name(app_short_name)
    application = app_response.application
    error = app_response.error

    if error:
        return error
    else:
        if len(application.keys()):
            return list(application.keys())[0]
        else:
            return {}
    
def get_endpoint_id_by_name(endpoint_name):
    #--
    endpoints = Endpoints(get_database_path(config.CONFIG_FILE_PATH, 'endpoint'))
    endpoint_result = endpoints.get_endpoint_by_name(endpoint_name)
    endpoint = endpoint_result.endpoint
    error = endpoint_result.error
    
    if error:
        return error
        
    else:
        if len(endpoint.keys()):
            return list(endpoint.keys())[0]
        else:
            return {}