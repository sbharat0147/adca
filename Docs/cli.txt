# Autonomous Data Collector Agent CLI Documentation

## Overview

The `cli.py` module provides the command-line interface (CLI) for the Autonomous Data Collector Agent. It allows users to interact with the agent, perform various operations, and manage applications and endpoints.

## Module Structure

### Importing Modules

The module starts by importing various modules and classes from the `autonomous_data_collection_agent` package and other Python standard libraries. It also includes the `Enum` class from the `enum` module.

### Logging Configuration

The code configures the logging module in Python. It sets the log file path, file mode, log message format, date format, and log level to DEBUG.

### Typer Initialization

The module defines a Python application using the `Typer` library. The `Typer()` function creates an instance of the `Typer` class, which is used to define command-line interfaces (CLIs) in Python.

### Initialization Function

The `init` function initializes the databases by creating a config file and initializing the endpoint and app databases. It takes `endpoint_db_path` and `app_db_path` parameters to specify the location of the databases.

## CLI Commands and Functions

### 1. Enabling/Disabling Threading

- **Function:** `enable_threading`
- **Description:** Enables or disables threading for concurrent file downloads and logs the status.
- **Parameters:**
  - `is_enabled`: String representing whether threading should be enabled or disabled.

### 2. Setting Concurrent Threads

- **Function:** `set_concurrent_threads`
- **Description:** Sets the number of concurrent threads based on the CPU count and prompts the user for confirmation.
- **Parameters:**
  - `thread_count`: Integer representing the number of threads.
  - `force`: Boolean option to force the change without confirmation.

### 3. Enabling/Disabling Encryption

- **Function:** `enable_encryption`
- **Description:** Enables or disables file encryption based on the value of the `is_enabled` parameter.
- **Parameters:**
  - `is_enabled`: Boolean flag indicating whether file encryption should be enabled.

### 4. Resetting Encryption Key

- **Function:** `reset_encryption_key`
- **Description:** Prompts the user to confirm resetting the encryption key and resets it if confirmed.

### 5. Checking Encryption Status

- **Function:** `check_encryption`
- **Description:** Checks if encryption is enabled and provides a message accordingly.

### 6. Getting Endpoints and Applications

- **Function:** `get_endpoints`
- **Description:** Returns an instance of the `Endpoints` class for performing operations on data.

- **Function:** `get_applications`
- **Description:** Returns an instance of the `Applications` class for operating on data.

### 7. Validating Datetime Format

- **Function:** `validate_datetime`
- **Description:** Validates if a given datetime string is in the format ‘DD-MM-YYYY hh:mm:ss’.
- **Parameters:**
  - `datetime_str`: String representing a date and time.

### 8. Adding an Endpoint

- **Function:** `add_endpoint`
- **Description:** Adds a new endpoint with various details.
- **Parameters:**
  - Multiple parameters including `name`, `app_short_name`, `url_endpoint`, `method`, `payload`, `filters`, `page_size`, `last_sync`, `process_status`, and `status`.

- **Example Usage:** `python your_script.py add_endpoint --name "Example Endpoint" --app-name "AOS" --endpoint "example-api-endpoint" --method POST --payload '{"key1": "value1", "key2": "value2"}' --filters '[{"column_name": "name", "operator": "value", "column_value": "value"}]' --page-size 500 --last-sync "13-10-2023 14:30:00" --process-status 0 --status 1`

### 9. Listing Endpoints

- **Function:** `list_endpoints`
- **Description:** Lists all endpoints.

- **Function:** `list_app_endpoints`
- **Description:** Lists all endpoints for a given application.
- **Parameters:**
  - `app_short_name`: Short name of the application.

### 10. Retrieving Endpoint Information

- **Function:** `get_endpoint`
- **Description:** Retrieves an endpoint using its ID and displays the result.
- **Parameters:**
  - `endpoint_id`: ID of the endpoint.

- **Function:** `get_endpoint_by_name`
- **Description:** Retrieves an endpoint using its name and displays the result.
- **Parameters:**
  - `endpoint_name`: Name of the endpoint.

- **Function:** `get_endpoint_by_url`
- **Description:** Retrieves an endpoint using its URL and displays the result.
- **Parameters:**
  - `url_endpoint`: URL of the endpoint.

### 11. Updating Endpoint Information

- **Function:** `update_endpoint`
- **Description:** Updates an existing endpoint with new details based on provided arguments.
- **Parameters:**
  - Multiple parameters including `endpoint_id`, `name`, `app_short_name`, `url_endpoint`, `method`, `payload`, `filters`, `page_size`, `last_sync`, `process_status`, and `status`.
  
- **Example Usage:** `python your_script.py update_endpoint --id "231541323453553701" --name "Updated Name" --app-name "Updated App" --method POST --status 0`

- **Function:** `update_endpoint_process_status`
- **Description:** Updates the process status of an existing endpoint.
- **Parameters:**
  - `endpoint_id`: ID of the endpoint.
  - `process_status`: New process status.

- **Example Usage:** `python your_script.py update_process_endpoint --id "231541323453553701" --process-status 1`

### 12. Removing Endpoints

- **Function:** `remove_endpoint`
- **Description:** Removes an endpoint using its endpoint ID, with an option to force deletion without confirmation.
- **Parameters:**
  - `endpoint_id`: ID of the endpoint.
  - `force`: Boolean option to force deletion without confirmation.

- **Function:** `remove_app_endpoints`
- **Description:** Removes endpoints associated with a given application short name, with an option to force deletion without confirmation.
- **Parameters:**
  - `app_short_name`: Short name of the application.
  - `force`: Boolean flag indicating whether to force deletion without confirmation.

- **Function:** `remove_all_endpoints`
- **Description:** Removes all endpoints, with an option to force deletion without confirmation.
- **Parameters:**
  - `force`: Boolean flag determining whether to delete all endpoints without confirmation.

### 13. Enumeration Classes

- **Class:** `HttpMethod`
  - **Description:** Restricts methods to GET, POST, and None using named tuple types.

- **Class:** `UrlSchemes`
  - **Description:** Enumeration representing different URL schemes such as “http” and “https”.

- **Class:** `AuthTypes`
  - **Description:** Enumeration representing different types of authentication.

### 14. Managing Applications

- **Function:** `add_application`
- **Description:** Adds a new application with the provided details.
- **Parameters:**
  - Multiple parameters including `name`, `short_name`, `host`, `url_scheme`, `auth_type`, `

auth_token`, `auth_username`, and `auth_password`.

- **Example Usage:** `python your_script.py add_application --name "New App" --short-name "NA" --host "example.com" --url-scheme "https" --auth-type "Basic" --auth-username "user" --auth-password "pass"`

- **Function:** `list_applications`
- **Description:** Lists all applications.

- **Function:** `get_application`
- **Description:** Retrieves application details using the short name and displays the result.
- **Parameters:**
  - `app_short_name`: Short name of the application.

- **Function:** `update_application`
- **Description:** Updates an existing application with new details based on provided arguments.
- **Parameters:**
  - Multiple parameters including `short_name`, `name`, `host`, `url_scheme`, `auth_type`, `auth_token`, `auth_username`, and `auth_password`.

- **Example Usage:** `python your_script.py update_application --short-name "NA" --name "Updated App" --host "new-example.com" --auth-username "new_user"`

- **Function:** `remove_application`
- **Description:** Removes an application using its short name, with an option to force deletion without confirmation.
- **Parameters:**
  - `app_short_name`: Short name of the application.
  - `force`: Boolean flag indicating whether to force deletion without confirmation.

- **Function:** `remove_all_applications`
- **Description:** Removes all applications, with an option to force deletion without confirmation.
- **Parameters:**
  - `force`: Boolean flag determining whether to delete all applications without confirmation.

### 15. CLI Entry Point

The module defines the main entry point for the CLI using the `if __name__ == "__main__":` block. It calls the `cli()` function to run the CLI.

## Running the CLI

To run the Autonomous Data Collector Agent CLI, execute the `cli.py` script using the Python interpreter. The CLI supports various commands and options for managing endpoints, applications, and other settings.

### Example Usage:

#### Enabling Threading:
```bash
python cli.py enable_threading --is-enabled true
```

#### Setting Concurrent Threads:
```bash
python cli.py set_concurrent_threads --thread-count 4
```

#### Adding an Endpoint:
```bash
python cli.py add_endpoint --name "Example Endpoint" --app-name "AOS" --endpoint "example-api-endpoint" --method POST --payload '{"key1": "value1", "key2": "value2"}' --filters '[{"column_name": "name", "operator": "value", "column_value": "value"}]' --page-size 500 --last-sync "13-10-2023 14:30:00" --process-status 0 --status 1'
```

#### Listing Endpoints:
```bash
python cli.py list_endpoints
```

#### Retrieving Endpoint Information:
```bash
python cli.py get_endpoint --endpoint-id 123456789
```

#### Updating Endpoint Information:
```bash
python cli.py update_endpoint --endpoint-id 123456789 --name "Updated Endpoint" --app-name "Updated App" --method PUT --payload '{"updated_key": "updated_value"}' --last-sync "14-10-2023 15:45:00" --process-status 1 --status 0'
```

#### Removing Endpoint:
```bash
python cli.py remove_endpoint --endpoint-id 123456789
```

#### Adding an Application:
```bash
python cli.py add_application --name "New App" --short-name "NA" --host "new-example.com" --url-scheme "https" --auth-type "Basic" --auth-username "new_user" --auth-password "new_pass"
```

#### Listing Applications:
```bash
python cli.py list_applications
```

#### Retrieving Application Information:
```bash
python cli.py get_application --app-short-name "NA"
```

#### Updating Application Information:
```bash
python cli.py update_application --short-name "NA" --name "Updated App" --host "updated-example.com" --auth-username "updated_user"
```

#### Removing Application:
```bash
python cli.py remove_application --app-short-name "NA"
```

#### Enabling Encryption:
```bash
python cli.py enable_encryption --is-enabled true
```

#### Resetting Encryption Key:
```bash
python cli.py reset_encryption_key
```

#### Checking Encryption Status:
```bash
python cli.py check_encryption
```

### Command-Line Arguments

The CLI accepts various command-line arguments and options, which are documented in each command's respective help message. Users can run the CLI with the `--help` option to get information about the available commands and their usage.

### Configuration File

The CLI uses a configuration file (`config.ini`) to store settings such as database paths, log file paths, and encryption keys. Users can modify the configuration file to customize the behavior of the Autonomous Data Collector Agent CLI.

## Conclusion

The Autonomous Data Collector Agent CLI provides a comprehensive set of commands for managing endpoints, applications, and configuration settings. Users can leverage these commands to interact with the agent, configure threading settings, perform CRUD operations on endpoints and applications, and manage encryption. The CLI aims to offer flexibility and ease of use for users working with the Autonomous Data Collector Agent.